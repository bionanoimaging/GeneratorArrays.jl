var documenterSearchIndex = {"docs":
[{"location":"distance/#Concrete-GeneratorArrays","page":"Distance Functions","title":"Concrete GeneratorArrays","text":"","category":"section"},{"location":"distance/","page":"Distance Functions","title":"Distance Functions","text":"Types to change scaling and reference","category":"page"},{"location":"distance/","page":"Distance Functions","title":"Distance Functions","text":"Ctr\nSca","category":"page"},{"location":"distance/#GeneratorArrays.Ctr","page":"Distance Functions","title":"GeneratorArrays.Ctr","text":"Ctr\n\nAbstract type to specify the reference position from which several other types subtype.\n\nPossible subtypes\n\nCtrCorner: Set the reference pixel in the corner\nCtrFFT: Set the reference pixel to the FFT center.\nCtrMid: Set the reference pixel to real mid. For uneven arrays it is the center pixel, for even arrays it is the centered around a half pixel.\nCtrEnd Set the reference to the end corner (last pixel)\n\n\n\n\n\n","category":"type"},{"location":"distance/#GeneratorArrays.Sca","page":"Distance Functions","title":"GeneratorArrays.Sca","text":"Sca\n\nAbstract type to indicate a scaling from which several other types subtype.\n\nPossible subtypes\n\nScaUnit: No scaling of the indices \nScaNorm: Total length along each dimension is normalized to 1\nScaFT: Reciprocal Fourier coordinates\nScaFTEdge: Such that the edge (in FFT sense) of the pixel is 1.0\n\n\n\n\n\n","category":"type"},{"location":"distance/","page":"Distance Functions","title":"Distance Functions","text":"rr2\nrr\nxx\nyy\nzz","category":"page"},{"location":"distance/#GeneratorArrays.rr2","page":"Distance Functions","title":"GeneratorArrays.rr2","text":"rr2([T=Float64], size::size::NTuple{N, Int};\n    offset=CtrFT,\n    scale=ScaUnit)\n\nCalculates the squared radius to a reference pixel. In this case CtrFT is the center defined by the FFT convention. ScaUnit leaves the values unscaled. offset and scale can be either of <:Ctr, <:Sca respectively or simply tuples with the same shape as size. Look at ?Ctr and ?Sca for all options.\n\nNote that this function is based on a GeneratorArray and therefore does not allocate the full memory needed to represent the array.\n\nExamples\n\njulia> rr2((4, 4))\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 8.0  5.0  4.0  5.0\n 5.0  2.0  1.0  2.0\n 4.0  1.0  0.0  1.0\n 5.0  2.0  1.0  2.0\n\nChange Reference Position\n\njulia> rr2((3,3), offset=CtrCorner)\n3×3 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 0.0  1.0  4.0\n 1.0  2.0  5.0\n 4.0  5.0  8.0\n\njulia> rr2((4,4), offset=CtrFT)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 8.0  5.0  4.0  5.0\n 5.0  2.0  1.0  2.0\n 4.0  1.0  0.0  1.0\n 5.0  2.0  1.0  2.0\n\njulia> rr2((4,4), offset=CtrMid)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 4.5  2.5  2.5  4.5\n 2.5  0.5  0.5  2.5\n 2.5  0.5  0.5  2.5\n 4.5  2.5  2.5  4.5\n\njulia> rr2((4,4), offset=CtrEnd)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 18.0  13.0  10.0  9.0\n 13.0   8.0   5.0  4.0\n 10.0   5.0   2.0  1.0\n  9.0   4.0   1.0  0.0\n\njulia> rr2((3, 3), offset=(1, 1))\n3×3 GeneratorArray{Float64, 2, GeneratorArrays.var\"#4#5\"{Float64, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}:\n 0.0  1.0  4.0\n 1.0  2.0  5.0\n 4.0  5.0  8.0\n\nChange Scaling\n\njulia> rr((4,4), scale=ScaUnit)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 2.82843  2.23607  2.0  2.23607\n 2.23607  1.41421  1.0  1.41421\n 2.0      1.0      0.0  1.0\n 2.23607  1.41421  1.0  1.41421\n\njulia> rr((4,4), scale=ScaNorm)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}:\n 0.942809  0.745356  0.666667  0.745356\n 0.745356  0.471405  0.333333  0.471405\n 0.666667  0.333333  0.0       0.333333\n 0.745356  0.471405  0.333333  0.471405\n\njulia> rr((4,4), scale=ScaFT)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}:\n 0.707107  0.559017  0.5   0.559017\n 0.559017  0.353553  0.25  0.353553\n 0.5       0.25      0.0   0.25\n 0.559017  0.353553  0.25  0.353553\n\njulia> rr((4,4), scale=ScaFTEdge)\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Float64, Float64}}}:\n 1.41421  1.11803   1.0  1.11803\n 1.11803  0.707107  0.5  0.707107\n 1.0      0.5       0.0  0.5\n 1.11803  0.707107  0.5  0.707107\n\njulia> rr2(Int, (3, 3), offset=(1, 1), scale=(10, 10))\n3×3 GeneratorArray{Int64, 2, GeneratorArrays.var\"#4#5\"{Int64, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}:\n   0  100  400\n 100  200  500\n 400  500  800\n\n\n\n\n\n","category":"function"},{"location":"distance/#GeneratorArrays.rr","page":"Distance Functions","title":"GeneratorArrays.rr","text":"rr([T=Float64], size::size::NTuple{N, Int};\n   offset=CtrFT,\n   scale=ScaUnit)\n\nSee rr2 for all options.\n\nExamples\n\njulia> rr((3, 3))\n3×3 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 1.41421  1.0  1.41421\n 1.0      0.0  1.0\n 1.41421  1.0  1.41421\n\njulia> rr((3, 3), offset=CtrCorner)\n3×3 GeneratorArray{Float64, 2, GeneratorArrays.var\"#9#10\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n 0.0  1.0      2.0\n 1.0  1.41421  2.23607\n 2.0  2.23607  2.82843\n\n\n\n\n\n","category":"function"},{"location":"distance/#GeneratorArrays.xx","page":"Distance Functions","title":"GeneratorArrays.xx","text":"xx([T=Float64], size::size::NTuple{N, Int};\n   offset=CtrFT,\n   scale=ScaUnit)\n\nA distance ramp along first dimension.\n\njulia> xx((4,4))\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#14#15\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n -2.0  -2.0  -2.0  -2.0\n -1.0  -1.0  -1.0  -1.0\n  0.0   0.0   0.0   0.0\n  1.0   1.0   1.0   1.0\n\n\n\n\n\n","category":"function"},{"location":"distance/#GeneratorArrays.yy","page":"Distance Functions","title":"GeneratorArrays.yy","text":"yy([T=Float64], size::size::NTuple{N, Int};\n   offset=CtrFT,\n   scale=ScaUnit)\n\nA distance ramp along second dimension.\n\njulia> yy((4,4))\n4×4 GeneratorArray{Float64, 2, GeneratorArrays.var\"#19#20\"{Float64, Tuple{Float64, Float64}, Tuple{Int64, Int64}}}:\n -2.0  -1.0  0.0  1.0\n -2.0  -1.0  0.0  1.0\n -2.0  -1.0  0.0  1.0\n -2.0  -1.0  0.0  1.0\n\n\n\n\n\n","category":"function"},{"location":"distance/#GeneratorArrays.zz","page":"Distance Functions","title":"GeneratorArrays.zz","text":"zz([T=Float64], size::size::NTuple{N, Int};\n   offset=CtrFT,\n   scale=ScaUnit)\n\nA distance ramp along third dimension.\n\njulia> zz((1, 1, 4))\n1×1×4 GeneratorArray{Float64, 3, GeneratorArrays.var\"#24#25\"{Float64, Tuple{Float64, Float64, Float64}, Tuple{Int64, Int64, Int64}}}:\n[:, :, 1] =\n -2.0\n\n[:, :, 2] =\n -1.0\n\n[:, :, 3] =\n 0.0\n\n[:, :, 4] =\n 1.0\n\n\n\n\n\n","category":"function"},{"location":"window/#Window-Functions","page":"Window Functions","title":"Window Functions","text":"","category":"section"},{"location":"#GeneratorArrays.jl","page":"GeneratorArrays.jl","title":"GeneratorArrays.jl","text":"","category":"section"},{"location":"","page":"GeneratorArrays.jl","title":"GeneratorArrays.jl","text":"Here you can find the docstrings of all functions. We also provide several concrete generators.","category":"page"},{"location":"#GeneratorArray-Interface","page":"GeneratorArrays.jl","title":"GeneratorArray Interface","text":"","category":"section"},{"location":"","page":"GeneratorArrays.jl","title":"GeneratorArrays.jl","text":"The abstract GeneratorArray definition","category":"page"},{"location":"","page":"GeneratorArrays.jl","title":"GeneratorArrays.jl","text":"GeneratorArray","category":"page"},{"location":"#GeneratorArrays.GeneratorArray","page":"GeneratorArrays.jl","title":"GeneratorArrays.GeneratorArray","text":"GeneratorArray([T], gen::F, size::NTuple{N,Int}) where {N,F}\n\nGenerate a GeneratorArray object which behaves like an array but does not allocate the full array. Instead it calculates the elements when needed. This is useful to prevent array allocations. gen is a function which takes the array indices wrapped as tuple as input. The output of gen determines the element type of the resulting array. size is the output size of the resulting array. T can be the optional element type of the arrays.  gen needs to have T as return type, otherwise the GeneratorArray might be type unstable.\n\nExamples\n\njulia> GeneratorArray(x -> sum(x), (3, 3))\n3×3 GeneratorArray{Int64, 2, var\"#182#183\"}:\n 2  3  4\n 3  4  5\n 4  5  6\n\njulia> GeneratorArray(x -> sum(abs2.(x)), (3, 3))\n3×3 GeneratorArray{Int64, 2, var\"#184#185\"}:\n  2   5  10\n  5   8  13\n 10  13  18\n\njulia> GeneratorArray(x -> (x[1], x[2], \"Julia\"), (3,3))\n3×3 GeneratorArray{Tuple{Int64, Int64, String}, 2, var\"#18#19\"}:\n (1, 1, \"Julia\")  (1, 2, \"Julia\")  (1, 3, \"Julia\")\n (2, 1, \"Julia\")  (2, 2, \"Julia\")  (2, 3, \"Julia\")\n (3, 1, \"Julia\")  (3, 2, \"Julia\")  (3, 3, \"Julia\")\n\n\n\n\n\n","category":"type"}]
}
